#!/usr/bin/env bash
set -euo pipefail
set -x

# Fetch deps and build PokerTH on linux.
# Usage:
#    ./linux-build.sh
# or WORK_DIR=/some/path/to/clean/workspace ./linux-build.sh

# There's a bit of a overhead to help with caching when running on Github Actions

SCRIPT_ROOT=$(dirname "$(realpath $0)")         # Directory containg this script
REPO_ROOT=$(git rev-parse --show-toplevel)      # Abs path to repository root
WORK_DIR=${WORK_DIR:-$SCRIPT_ROOT/work}         # Where to download deps, etc.
INSTALL_DIR=${WORK_DIR}/installed               # Where we 'make install' our compiled dependencies
MARKER_DIR=${WORK_DIR}/markers               # Where we create 'markers' to indicate we've built a dependency
timestamp=$(date +%s)                           # Todays timestamp (unix epoc)

# Number of CPU cores, to speed up 'make'
numCores=$(grep "cpu cores" /proc/cpuinfo | head  -n 1 | awk '{ print $4 }')

# wget without overwriting
function fetch() {
    wget --continue --no-clobber "$1"
}

# Create a 'marker' file with provided name containing current timestamp
# We use those files to figure out if we need to build the dependency when running on Github Actions
function createMarker() {
    filename=name=${MARKER_DIR}/$1
    mkdir -p "$(dirname $filename)"
    echo $timestamp >"$filename"
}

# Figure out if a marker file exists and hasn't expired.
# We deem them valid for x number of days.  When they expire, try to build the dependency again.
# (and if we can't, then something has gone wrong and this script needs fixing)
function isGoodMarker() {
    filename=name=${MARKER_DIR}/$1
    if [[ ! -f ${filename} ]]; then
        return false
    fi
    markerDate=$(cat ${filename})
    let markerAge=$timestamp-$markerDate
    let maxAge=86400*14 # 14 days
    if [[ ${markerAge} -lt ${maxAge} ]]; then
        return true
    fi

    return false
}

mkdir -p ${WORK_DIR}
pushd ${WORK_DIR}

# Basic dependencies we can get from the OS
sudo apt-get install -y \
    autoconf \
    automake \
    libtool \
    curl \
    make \
    gcc \
    g++ \
    git \
    sudo \
    wget \
    unzip \
    qt5-default \
    libxcb-xinerama0-dev \
    libbz2-dev \
    libgsasl7-dev \
    libsqlite3-dev \
    libtinyxml-dev \
    libircclient-dev \
    libsdl-mixer1.2-dev \

# Download, compile and install protobuf
# the protobuf install directory is cached when building on Github Actions
version=3.6.1
marker=protobuf
if ! isGoodMarker ${marker}; then
	fetch "https://github.com/protocolbuffers/protobuf/releases/download/v${version}/protobuf-cpp-${version}.tar.gz"
	tar xf protobuf-cpp-${version}.tar.gz
  pushd protobuf-${version}
  ./configure --prefix=${INSTALL_DIR}
	make -j ${numCores}
 	make check
 	sudo make install
 	popd
  createMarker $markerfile
fi

# Download and build boost
# PokerTH doesn't compile with most recent boost 1.73.0.
marker=boost
version=1_63_0
if ! isGoodMarker ${marker}; then
    fetch "https://iweb.dl.sourceforge.net/project/boost/boost/${version//_/.}/boost_${version}.tar.gz"
    tar xf boost_${version}.tar.gz
    touch boost_${version}/${MARKERFILE}.dl
    pushd boost_${version}
    ./bootstrap.sh
    ./b2 install --prefix=${INSTALL_DIR}
    ./b2 --build-dir=${INSTALL_DIR} --toolset=gcc -j ${numCores} stage
    createMarker ${marker}
    popd
fi

popd

echo "Building PokerTH"
pushd ${REPO_ROOT}
rm Makefile*     # delete Makefiles generated by qmake
qmakeCmd="qmake PREFIX=${INSTALL_DIR} INCLUDEPATH+=${INSTALL_DIR} INCLUDEPATH+=/usr INCLUDEPATH+=/usr/include/x86_64-linux-gnu/qt5 QMAKE_CFLAGS_ISYSTEM= -spec linux-g++"

for i in client official_server; do
    echo Building $i
    $qmakeCmd CONFIG+="$i" pokerth.pro
    make -j 4
done

# Any tests to run?

echo
echo '********************* SUCCESS! *********************'
echo
